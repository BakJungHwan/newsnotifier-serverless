# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: newsnotifier-serverless
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x

# you can overwrite defaults here
  stage: dev
  region: ap-northeast-2

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ec2:AcceptVpcEndpointConnections"
        - "ec2:AssociateVpcCidrBlock"
        - "ec2:AttachClassicLinkVpc"
        - "ec2:AttachInternetGateway"
        - "ec2:AttachNetworkInterface"
        - "ec2:AttachVpnGateway"
        - "ec2:AuthorizeSecurityGroupEgress"
        - "ec2:AuthorizeSecurityGroupIngress"
        - "ec2:CreateCustomerGateway"
        - "ec2:CreateDefaultSubnet"
        - "ec2:CreateDefaultVpc"
        - "ec2:CreateDhcpOptions"
        - "ec2:CreateEgressOnlyInternetGateway"
        - "ec2:CreateFlowLogs"
        - "ec2:CreateInternetGateway"
        - "ec2:CreateNatGateway"
        - "ec2:CreateNetworkAcl"
        - "ec2:CreateNetworkAcl"
        - "ec2:CreateNetworkAclEntry"
        - "ec2:CreateNetworkInterface"
        - "ec2:CreateNetworkInterfacePermission"
        - "ec2:CreateRoute"
        - "ec2:CreateRouteTable"
        - "ec2:CreateSecurityGroup"
        - "ec2:CreateSubnet"
        - "ec2:CreateTags"
        - "ec2:CreateVpc"
        - "ec2:CreateVpcEndpoint"
        - "ec2:CreateVpcEndpointConnectionNotification"
        - "ec2:CreateVpcEndpointServiceConfiguration"
        - "ec2:CreateVpcPeeringConnection"
        - "ec2:CreateVpnConnection"
        - "ec2:CreateVpnConnectionRoute"
        - "ec2:CreateVpnGateway"
        - "ec2:DeleteCustomerGateway"
        - "ec2:DeleteDhcpOptions"
        - "ec2:DeleteEgressOnlyInternetGateway"
        - "ec2:DeleteFlowLogs"
        - "ec2:DeleteInternetGateway"
        - "ec2:DeleteNatGateway"
        - "ec2:DeleteNetworkAcl"
        - "ec2:DeleteNetworkAclEntry"
        - "ec2:DeleteNetworkInterface"
        - "ec2:DeleteNetworkInterfacePermission"
        - "ec2:DeleteRoute"
        - "ec2:DeleteRouteTable"
        - "ec2:DeleteSecurityGroup"
        - "ec2:DeleteSubnet"
        - "ec2:DeleteTags"
        - "ec2:DeleteVpc"
        - "ec2:DeleteVpcEndpoints"
        - "ec2:DeleteVpcEndpointConnectionNotifications"
        - "ec2:DeleteVpcEndpointServiceConfigurations"
        - "ec2:DeleteVpcPeeringConnection"
        - "ec2:DeleteVpnConnection"
        - "ec2:DeleteVpnConnectionRoute"
        - "ec2:DeleteVpnGateway"
        - "ec2:DescribeAccountAttributes"
        - "ec2:DescribeAddresses"
        - "ec2:DescribeAvailabilityZones"
        - "ec2:DescribeClassicLinkInstances"
        - "ec2:DescribeCustomerGateways"
        - "ec2:DescribeDhcpOptions"
        - "ec2:DescribeEgressOnlyInternetGateways"
        - "ec2:DescribeFlowLogs"
        - "ec2:DescribeInstances"
        - "ec2:DescribeInternetGateways"
        - "ec2:DescribeKeyPairs"
        - "ec2:DescribeMovingAddresses"
        - "ec2:DescribeNatGateways"
        - "ec2:DescribeNetworkAcls"
        - "ec2:DescribeNetworkInterfaceAttribute"
        - "ec2:DescribeNetworkInterfacePermissions"
        - "ec2:DescribeNetworkInterfaces"
        - "ec2:DescribePrefixLists"
        - "ec2:DescribeRouteTables"
        - "ec2:DescribeSecurityGroupReferences"
        - "ec2:DescribeSecurityGroups"
        - "ec2:DescribeStaleSecurityGroups"
        - "ec2:DescribeSubnets"
        - "ec2:DescribeTags"
        - "ec2:DescribeVpcAttribute"
        - "ec2:DescribeVpcClassicLink"
        - "ec2:DescribeVpcClassicLinkDnsSupport"
        - "ec2:DescribeVpcEndpointConnectionNotifications"
        - "ec2:DescribeVpcEndpointConnections"
        - "ec2:DescribeVpcEndpoints"
        - "ec2:DescribeVpcEndpointServiceConfigurations"
        - "ec2:DescribeVpcEndpointServicePermissions"
        - "ec2:DescribeVpcEndpointServices"
        - "ec2:DescribeVpcPeeringConnections"
        - "ec2:DescribeVpcs"
        - "ec2:DescribeVpnConnections"
        - "ec2:DescribeVpnGateways"
        - "ec2:DetachClassicLinkVpc"
        - "ec2:DetachInternetGateway"
        - "ec2:DetachNetworkInterface"
        - "ec2:DetachVpnGateway"
        - "ec2:DisableVgwRoutePropagation"
        - "ec2:DisableVpcClassicLink"
        - "ec2:DisableVpcClassicLinkDnsSupport"
        - "ec2:DisassociateAddress"
        - "ec2:DisassociateRouteTable"
        - "ec2:DisassociateSubnetCidrBlock"
        - "ec2:DisassociateVpcCidrBlock"
        - "ec2:EnableVgwRoutePropagation"
        - "ec2:EnableVpcClassicLink"
        - "ec2:EnableVpcClassicLinkDnsSupport"
        - "ec2:ModifyNetworkInterfaceAttribute"
        - "ec2:ModifySubnetAttribute"
        - "ec2:ModifyVpcAttribute"
        - "ec2:ModifyVpcEndpoint"
        - "ec2:ModifyVpcEndpointConnectionNotification"
        - "ec2:ModifyVpcEndpointServiceConfiguration"
        - "ec2:ModifyVpcEndpointServicePermissions"
        - "ec2:ModifyVpcPeeringConnectionOptions"
        - "ec2:ModifyVpcTenancy"
        - "ec2:MoveAddressToVpc"
        - "ec2:RejectVpcEndpointConnections"
        - "ec2:RejectVpcPeeringConnection"
        - "ec2:ReleaseAddress"
        - "ec2:ReplaceNetworkAclAssociation"
        - "ec2:ReplaceNetworkAclEntry"
        - "ec2:ReplaceRoute"
        - "ec2:ReplaceRouteTableAssociation"
        - "ec2:ResetNetworkInterfaceAttribute"
        - "ec2:RestoreAddressToClassic"
        - "ec2:RevokeSecurityGroupEgress"
        - "ec2:RevokeSecurityGroupIngress"
        - "ec2:UnassignIpv6Addresses"
        - "ec2:UnassignPrivateIpAddresses"
        - "ec2:UpdateSecurityGroupRuleDescriptionsEgress"
        - "ec2:UpdateSecurityGroupRuleDescriptionsIngress"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "logs:*"
      Resource: "*"


# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  exclude:
    - test-events/**
    - .idea/**
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  login:
    handler: src/v1/auth.login
    events:
      - http:
          path: v1/apis/auth/login
          method: post
  register:
    handler: src/v1/auth.register
    events:
      - http:
          path: v1/apis/auth/register
          method: post
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
